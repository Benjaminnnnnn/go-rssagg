package main

import (
	"database/sql"
	"log"
	"net/http"
	"os"

	"github.com/benjaminnnnnn/go-review/rssagg/handlers"
	"github.com/benjaminnnnnn/go-review/rssagg/internal/database"
	"github.com/benjaminnnnnn/go-review/rssagg/middlewares"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"github.com/go-chi/cors"
	"github.com/joho/godotenv"

	_ "github.com/benjaminnnnnn/go-review/rssagg/docs" // docs is generated by Swag CLI, you have to import it.
	_ "github.com/lib/pq"
	httpSwagger "github.com/swaggo/http-swagger"
)

// @title RSS Feed API
// @version 1.0
// @description This is a rss feed api enabling user to subscribe to any rss feed.
// @termsOfService http://swagger.io/terms/

// @contact.name Benjamin Zhuang
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @BasePath /v1
func main() {
	godotenv.Load(".env")

	port := os.Getenv("PORT")
	if port == "" {
		log.Fatal("PORT is not found in the environment")
	}

	dbURL := os.Getenv("DB_URL")
	if dbURL == "" {
		log.Fatal("DB_URL is not found in the environment")
	}

	// conn, _ := sql.Open("postgres", dbURL)
	conn, err := sql.Open("postgres", dbURL)
	if err != nil {
		log.Fatal("Unable to connect to database")
	}
	defer conn.Close()

	apiConfig := &handlers.ApiConfig{
		DB: database.New(conn),
	}
	authMiddleware := &middlewares.AuthMiddleware{
		ApiConfig: apiConfig,
	}

	router := chi.NewRouter()
	router.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"*"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300,
	}))
	router.Use(middleware.Logger)

	v1Router := chi.NewRouter()
	v1Router.Get("/healthz", handlers.HandlerReadiness)
	v1Router.Get("/error", handlers.HandlerErr)

	v1Router.Post("/users", apiConfig.CreateUser)
	v1Router.Get("/users", authMiddleware.MiddlewareAuth(apiConfig.GetUser))

	v1Router.Post("/feeds", authMiddleware.MiddlewareAuth(apiConfig.CreateFeed))
	v1Router.Get("/feeds", apiConfig.GetFeeds)

	v1Router.Post("/feed-follows", authMiddleware.MiddlewareAuth(apiConfig.CreateFeedFollow))

	router.Mount("/v1", v1Router)

	server := &http.Server{
		Handler: router,
		Addr:    ":" + port,
	}

	log.Printf("Server staring on port %v", port)

	router.Get("/docs/*", httpSwagger.Handler())

	if err := server.ListenAndServe(); err != nil {
		log.Fatalf("Unable to start server: %v", err)
	}
}
